pipeline {
    agent {
        label 'podman'
    }
    options {
        timeout(time: 20, unit: 'MINUTES')
        buildDiscarder(logRotator(
            daysToKeepStr: '7',
            artifactDaysToKeepStr: '7'
        ))
    }
    tools {
        jdk '11 (OpenJDK)'
        maven 'Maven 3.6.1'
    }
    environment {
        // Sonarqube
        SONAR_HOST_URL = 'https://sonarqube.adesso-group.com'
        SONAR_CREDENTIALS = 'build_3a585af777e693-sq_token'
        SONAR_INSTALLATION = 'sonarqube.adesso-group.com'
        SONAR_PROJECT_KEY = 'RAA-2'
        SONAR_TOKEN = '67c370c957b47031eb9a5ae1735a638debb9b807'
        // deployment
        REGISTRY = 'artifactory.adesso-group.com/raa-docker'
        REGISTRY_CREDENTIALS = 'build_3a585af777e693'
        IMAGE = 'test1'
        TAG = 'latest'
    }
    stages {
        stage('Build') {
            steps {
                line(100)
                print('Start Build Stage')
                sh 'chmod +x ./mvnw'
                mvnw(
                    'clean package',
                    '-Dmaven.test.skip=true'
                )
                print('End Build Stage')
                line(100)
            }
        }
        stage('Unit Tests') {
            steps {
                line(100)
                print('Start Unit Test Stage')
                mvnw(
                    'surefire-report:report',
                    '-Dquarkus.datasource.db-kind=h2',
                    '-Dquarkus.datasource.jdbc.url=jdbc:h2:mem:test'
                )
                print('End Unit Test Stage')
                line(100)
            }
        }
        stage('Sonarqube') {
            steps {
                line(100)
                print('Start Sonarqube Stage')
                withSonarQubeEnv(credentialsId: "${SONAR_CREDENTIALS}", installationName: "${SONAR_INSTALLATION}") {
                    mvnw(
                        'clean verify',
                                    'sonar:sonar',
                                    '-Dsonar.projectKey=${SONAR_PROJECT_KEY}',
                                    '-Dsonar.host.url=${SONAR_HOST_URL}',
                                    '-Dsonar.login=${SONAR_TOKEN}',
                                    '-Dquarkus.datasource.db-kind=h2',
                                    '-Dquarkus.datasource.jdbc.url=jdbc:h2:mem:test'
                                )
                }
                print('End Sonarqube Stage')
                line(100)
            }
        }
        stage('Quality Gate') {
            steps {
                line(100)
                print('Start Quality Gate Stage')
                sh 'sleep 3'
                waitForQualityGate abortPipeline: false
                print('End Quality Gate Stage')
                line(100)
            }
        }
        stage('Build Image') {
            steps {
                line(100)
                print('Start Build Image Stage')
                sh 'podman build . -t ${REGISTRY}/${IMAGE}:${TAG} -f src/main/docker/Dockerfile.jvm'
                print('End Build Image Stage')
                line(100)
            }
        }
        stage('Deploy Image') {
            steps {
                line(100)
                print('Start Deploy Image Stage')
                withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", usernameVariable: 'registry_user', passwordVariable: 'registry_pwd')]) {
                    sh 'podman login -u ${registry_user} -p ${registry_pwd} ${REGISTRY}'
                }
                sh 'podman push ${REGISTRY}/${IMAGE}:${TAG}'
                print('End Deploy Image Stage')
                line(100)
            }
        }
    }
    post {
        always {
            junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml'
        }
    }
}

def mvnw(String...args) {
    sh "./mvnw ${args.join(' ')} "
}

// Line as delimiter between individual tasks//
def line(int length) {
    String str = "";
    for (int i = 0; i<length; i++) {
        str += "-";
    }
    echo "${str}";
}

def print(String str) {
    echo "${str}"
}